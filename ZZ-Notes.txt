DYNAMODB TABLES

Amazon Resource Name (ARN)
 arn:aws:dynamodb:us-west-2:154570929134:table/Collabs-LatestProtocolsTable

Collabs-ProtocolsTable
    Partition Key:      iId
    Sort Key:           minId

Collabs-LatestProtocolsTable
    Partition Key:      majId
    Sort Key:           majDate

ITEM KEY/ID TYPES

    1) iId : unique nowID for the need, protocol, or guide concept/IDEA
    2) majId : compound Id: iId . majNum
    3) minId : compound Id: iId . majNum . minNum

ITEM VERSION NUMBERS
    1) verNum (1.0)
    2) majNum (1)
    3) minNum (0)

ITEM DATES
    1) Idea/Concept built date
    2) majDate
    3) minDate


#set($inputRoot = $input.path('$'))
{
    "TableName": "VersionedItems",
    "Item": {
        "ItemID": { "S": "$inputRoot.ItemID" },
        "VersionID": { "S": "$util.uuid()" },
        "MajorMinorVersion": { 
            "S": "#set($latestVersion = $input.params('latestVersion').split('\\.'))
            $latestVersion[0]#if($latestVersion.size() > 1).#set($minorVersion = $latestVersion[1].toInt() + 1)${minorVersion}#else.1#end" },
        "Timestamp": { "N": "$util.time.nowEpochMilliSeconds()" },
        "Data": { "M": $input.json('$') }
    }
}



POST TEMPLATE

#set($inputRoot = $input.path('$'))
{
    "TableName": "Collabs-ProtocolsTable", "Collabs-LatestProtocolsTable", (((((( PICK TABLE NAME  ))))))
    "Item": {
        "iId": {"S": "$inputRoot.iId"},
        "majId": {"S": "$inputRoot.majId"},
        "majDate": {"S": "$inputRoot.majDate"},
        "minId": {"S": "$inputRoot.minId"},
        "minDate": {"S": "$inputRoot.minDate"},
        "verNum": {"S": "$inputRoot.verNum"},
        "type": {"S": "$inputRoot.type"},
        "subtype": {"S": "$inputRoot.subtype"},
        "needTitle": { "M": { #foreach($lang in $inputRoot.needTitle.entrySet())"$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end#end}},
        "needMinId": {"S": "$inputRoot.needMinId"},
        "deleted": {"BOOL": "$inputRoot.deleted"},
        "data": {"M": $input.json('$.data')}
    }
}

        "needTitle": {"M": "$inputRoot.needTitle"},
        "needMinId": {"S": "$inputRoot.needMinId"},



#set($inputRoot = $input.path('$'))
{
    "TableName": "Collabs-LatestProtocolsTable",
    "Item": {
        "majorVersionId": {"S": "$inputRoot.majorVersionId"},
        "minorVersionId": {"S": "$inputRoot.minorVersionId"},
        "conceptId": {"S": "$inputRoot.conceptId"},
        "majorVersionNum": {"S": "$inputRoot.majorVersionNum"},
        "minorVersionNum": {"S": "$inputRoot.minorVersionNum"},
        "versionNum": {"S": "$inputRoot.versionNum"},
        "conceptCreatedAt": {"S": "$inputRoot.conceptCreatedAt"},
        "majorVersionCreatedAt": {"S": "$inputRoot.majorVersionCreatedAt"},
        "createdAt": {"S": "$inputRoot.createdAt"},
        "type": {"S": "$inputRoot.type"},
        "description": {
            "M": {
                #foreach($lang in $inputRoot.header.description.entrySet())
                    "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
                #end
            }
        },
        "title": {
            "M": {
                #foreach($lang in $inputRoot.content.title.entrySet())
                    "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
                #end
            }
        },
        "needName": {
            "M": {
                #foreach($lang in $inputRoot.header.needName.entrySet())
                    "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
                #end
            }
        },
        "needMinorVersionId": {"S": "$inputRoot.header.needMinorVersionId"},
        "intro": {
        "M": {
            #foreach($lang in $inputRoot.content.intro.entrySet())
            "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
            #end
        }
    },
        "history": {
            "L": [
                #foreach($entry in $inputRoot.history)
                    {
                        "M": {
                            "createdAt": {"S": "$entry.createdAt"},
                            "description": {
                                "M": {
                                    #foreach($lang in $entry.description.entrySet())
                                        "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
                                    #end
                                }
                            },
                            "minorVersionId": {"S": "$entry.minorVersionId"},
                            "author": {"S": "$entry.author"},
                            "contactInfo": {"S": "$entry.contactInfo"}
                        }
                    }#if($foreach.hasNext),#end
                #end
            ]
        },

 }

#set($inputRoot = $input.path('$'))

{
  "TableName": "collab-protocols",
  "Item": {
    "protocolId": {
      "S": "$inputRoot.header.protocolId"
    },
    "versionId": {
      "S": "$inputRoot.header.versionId"
    },
    "description": {
      "M": {
        #foreach($lang in $inputRoot.header.description.entrySet())
          "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
        #end
      }
    },
    "title": {
      "M": {
        #foreach($lang in $inputRoot.content.title.entrySet())
          "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
        #end
      }
    },
    "versionNumber": {
      "S": "$inputRoot.header.version"
    },
    "contextName": {
      "M": {
        #foreach($lang in $inputRoot.header.contextName.entrySet())
          "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
        #end
      }
    },
    "contextId": {
      "S": "$inputRoot.header.contextId"
    },
    "domainName": {
      "M": {
        #foreach($lang in $inputRoot.header.domainName.entrySet())
          "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
        #end
      }
    },
    "domainId": {
      "S": "$inputRoot.header.domainId"
    },
    "needName": {
      "M": {
        #foreach($lang in $inputRoot.header.needName.entrySet())
          "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
        #end
      }
    },
    "needId": {
      "S": "$inputRoot.header.needId"
    },
    "history": {
      "L": [
        #foreach($change in $inputRoot.history)
          {
            "M": {
              "date": {"S": "$change.date"},
              "description": {
                "M": {
                  #foreach($lang in $change.description.entrySet())
                    "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
                  #end
                }
              },
              "version": {
                "M": {
                  "number": {"S": "$change.version.number"},
                  "id": {
                    "M": {
                      #foreach($lang in $change.version.id.entrySet())
                        "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
                      #end
                    }
                  }
                }
              },
              "author": {"S": "$change.author"},
              "contactInfo": {"S": "$change.contactInfo"}
            }
          }#if($foreach.hasNext),#end
        #end
      ]
    },
    "intro": {
      "M": {
        #foreach($lang in $inputRoot.content.intro.entrySet())
          "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
        #end
      }
    },
    "elements": {
      "L": [
        #foreach($element in $inputRoot.content.elements)
          {
            "M": {
              #foreach($lang in $element.entrySet())
                "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
              #end
            }
          }#if($foreach.hasNext),#end
        #end
      ]
    },
    "contentAttribution": {
      "M": {
        #foreach($lang in $inputRoot.content.attribution.message.entrySet())
          "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
        #end
      }
    },
    "attributionUrl": {
      "S": "$inputRoot.content.attribution.url"
    },
    "links": {
      "L": [
        #foreach($link in $inputRoot.content.links)
          {
            "M": {
              "rel": {"S": "$link.rel"},
              "href": {"S": "$link.href"}
            }
          }#if($foreach.hasNext),#end
        #end
      ]
    },
    "purpose": {
      "M": {
        #foreach($lang in $inputRoot.discuss.purpose.entrySet())
          "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
        #end
      }
    },
    "comments": {
      "M": {
        #foreach($lang in $inputRoot.discuss.comments.entrySet())
          "$lang.key": {"S": "$lang.value"}#if($foreach.hasNext),#end
        #end
      }
    }
  }
}





TEST FILE

{
    "majId": "ABCDEFG#1",
    "minId": "ABCDEFG#1#0",
    "iId": "ABCDEFG",
    "verNum": 1.0,
    "minDate": "sdskjhsadfjksdhfjka",
    "majDate": "sdskjhsadfjksdhfjka",
    "type": "Need",
    "deleted": false,
    "data": { 
        "abc": { "S": "123" }, 
        "cbs": { "S": "456" } 
    }
}



RESPONSE TEMPLATE GET ITEM
#########################################################
#set($inputRoot = $input.path('$'))

#if($inputRoot.Item){
    "iId": "$inputRoot.Item.iId.S",
    "majId": "$inputRoot.Item.majId.S",
    "minId": "$inputRoot.Item.minId.S",
    "type": "$inputRoot.Item.type.S",
    "subtype": "$inputRoot.Item.subtype.S",
    "needMinId": "$inputRoot.Item.needMinId.S",
    "needTitle": { #foreach($lang in $inputRoot.Item.needTitle.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },
    "verNum": "$inputRoot.Item.verNum.S",
    "minDate": "$inputRoot.Item.minDate.S",
    "majDate": "$inputRoot.Item.majDate.S",
    "deleted": "$inputRoot.Item.deleted.BOOL",
    "title": { #foreach($lang in $inputRoot.Item.data.M.title.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },
    "description": { #foreach($lang in $inputRoot.Item.data.M.description.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },
    "tags": { #foreach($lang in $inputRoot.Item.data.M.tags.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },
    "history": [
        #foreach($entry in $inputRoot.Item.data.M.history.L){
            "date": "$entry.M.date.S",
            "author": "$entry.M.author.S",
            "contactInfo": "$entry.M.contactInfo.S",
            "description": { #foreach($lang in $entry.M.description.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },
            "verNum": "$entry.M.verNum.S",
            "minId": "$entry.M.minId.S"
            }#if($foreach.hasNext),#end
        #end
    ],
    "comComments": [ #foreach($entry in $inputRoot.Item.data.M.comComments.L){

        }#if($foreach.hasNext),#end#end ],
    "comFollowNum": "$inputRoot.Item.data.M.comFollowNum.N",
    "comSupportNum": "$inputRoot.Item.data.M.comSupportNum.N",
    "comForkNum": "$inputRoot.Item.data.M.comForkNum.N",
    "comAdoptNum": "$inputRoot.Item.data.M.comAdoptNum.N",
    #if($inputRoot.Item.data.M.intro)"intro": { #foreach($lang in $inputRoot.Item.data.M.intro.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },#end
    #if($inputRoot.Item.data.M.closing)"closing": { #foreach($lang in $inputRoot.Item.data.M.closing.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },#end
    #if($inputRoot.Item.data.M.regions)
    "regions": [ #foreach($region in $inputRoot.Item.data.M.regions.L){
            "level": "$region.M.level.S",
            "location": "$region.M.location.S"
        }#if($foreach.hasNext),#end#end ],
    #end
    #if($inputRoot.Item.data.M.definitions)"definitions": []#end
    #if($inputRoot.Item.data.M.variables)"variables": []#end
    #if($inputRoot.Item.data.M.attribComment)"attribComment": { #foreach($lang in $inputRoot.Item.data.M.attribComment.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },#end
    #if($inputRoot.Item.data.M.attribLink)"attribLink": "$entry.M.attribLink.S",#end
    #if($inputRoot.Item.data.M.elements)
    "elements": [ #foreach($element in $inputRoot.Item.data.M.elements.L){
            #foreach($lang in $element.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end
        }#if($foreach.hasNext),#end#end ],
    #end
    #if($inputRoot.Item.data.M.protocols)
    "protocols": [ #foreach($protocol in $inputRoot.Item.data.M.protocols.L){
            "title": #foreach($lang in $protocol.M.title.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end
            "minId": "$protocol.M.minId.S"
        }#if($foreach.hasNext),#end#end ],
    #end
} #else {
    "message": "Item not found."
} #end
#########################################################

TEST QUERY STRING

Protocol: 
iId=P.20240716T104226888-8083&minId=P.20240716T104226888-8083.1.0

Guide:
iId=G.20240716T105140654-9369&minId=G.20240716T105140654-9369.1.0


**********  Latest GET: PARAMS *************

year=2024&sinceDate=2024-07-17T01:58-07:00

*********** LATEST RESPONSE TEMPLATE ***************

##  GET LATEST RESPONSE TEMPLATE

#set($inputRoot = $input.path('$'))
#set($p = "[|]") ## brackets escape the special character

{
    #if($inputRoot.Count != '')"count": $inputRoot.Count,#end
    #if($inputRoot.LastEvaluatedKey != '')"LastEvaluatedKey": "$inputRoot.LastEvaluatedKey",#end

  "items": [
    #foreach($item in $inputRoot.Items){
    "iId": "$item.iId.S",
    "majId": "$item.majId.S",
    "minId": "$item.minId.S",
    "type": "$item.type.S",
    "subtype": "$item.subtype.S",
    "needMajId": "$item.needMajId.S",
    "needTitle": { #foreach($lang in $item.needTitle.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },
    "verNum": "$item.verNum.S",
    "minDate": "$item.minDate.S",
    "majDate": "$item.majDate.S",
    "deleted": "$item.deleted.BOOL",
    "title": { #foreach($lang in $item.data.M.title.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },
    "description": { #foreach($lang in $item.data.M.description.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },
    "tags": { #foreach($lang in $item.data.M.tags.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },
    "history": [
        #foreach($entry in $item.data.M.history.L){
            "date": "$entry.M.date.S",
            "author": "$entry.M.author.S",
            "contactInfo": "$entry.M.contactInfo.S",
            "description": { #foreach($lang in $entry.M.description.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },
            "verNum": "$entry.M.verNum.S",
            "minId": "$entry.M.minId.S"
            }#if($foreach.hasNext),#end
        #end
    ],
    "comComments": [ #foreach($entry in $item.data.M.comComments.L){

        }#if($foreach.hasNext),#end#end ],
    "comFollowNum": "$item.data.M.comFollowNum.N",
    "comSupportNum": "$item.data.M.comSupportNum.N",
    "comForkNum": "$item.data.M.comForkNum.N",
    "comAdoptNum": "$item.data.M.comAdoptNum.N",
    #if($item.data.M.intro)"intro": { #foreach($lang in $item.data.M.intro.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },#end
    #if($item.data.M.closing)"closing": { #foreach($lang in $item.data.M.closing.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },#end
    #if($item.data.M.regions)
    "regions": [ #foreach($region in $item.data.M.regions.L){
            "level": "$region.M.level.S",
            "location": "$region.M.location.S"
        }#if($foreach.hasNext),#end#end ],
    #end
    #if($item.data.M.definitions)"definitions": [],#end
    #if($item.data.M.variables)"variables": [],#end
    #if($item.data.M.attribComment)"attribComment": { #foreach($lang in $item.data.M.attribComment.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },#end
    #if($item.data.M.attribLink)"attribLink": "$entry.M.attribLink.S",#end
    #if($item.data.M.elements)
    "elements": [ #foreach($element in $item.data.M.elements.L){
            #foreach($lang in $element.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end
        }#if($foreach.hasNext),#end#end ],
    #end
    #if($item.data.M.protocols)
    "protocols": [ #foreach($protocol in $item.data.M.protocols.L){
            "title": { #foreach($lang in $protocol.M.title.M.entrySet())"$lang.key": "$lang.value.S"#if($foreach.hasNext),#end#end },
            "minId": "$protocol.M.minId.S"
        }#if($foreach.hasNext),#end#end ]
    #end
    }#if($foreach.hasNext),#end
    #end]
}

*********** END OF TEMPLATE ***************

SMUM DOB REQUEST TEMPLATE
{
    "TableName": "$stageVariables.clientsTable",
    "IndexName": "dob-index",
    #if($input.params('lastkey') != "")"ExclusiveStartKey": $input.params('lastkey'),#end
    "Limit": 1000,
    "KeyConditionExpression": "dob = :v1",
    "ExpressionAttributeValues": {
        ":v1": {"S": "$input.params('dob')"}
    }
}

********** ROOT NEED ************

To Serve Life Needs : N.20240716T165825706-1513.1.2


To Collaborate : N.20240716T165825707-3154.1.0



Employment Agreement Protocol
G.20240716T165602811-5197.1.0

[
    {
        "title": {
            "pt": "Título e Descrição de Trabalho",
            "en": "Job Title and Description",
            "es": "Título y Descripción de Trabajo"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82a1",
        "id": "proto-1"
    },
    {
        "title": {
            "pt": "Compensação e Benefícios",
            "en": "Compensation and Benefits",
            "es": "Compensación y Beneficios"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82a2",
        "id": "proto-2"
    },
    {
        "title": {
            "pt": "Horário de Trabalho e Horas",
            "en": "Work Schedule and Hours",
            "es": "Horario de Trabajo y Horas"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82a3",
        "id": "proto-3"
    },
    {
        "title": {
            "pt": "Deveres e Responsabilidades",
            "en": "Duties and Responsibilities",
            "es": "Deberes y Responsabilidades"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82a4",
        "id": "proto-4"
    },
    {
        "title": {
            "pt": "Expectativas de Desempenho",
            "en": "Performance Expectations",
            "es": "Expectativas de Desempeño"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82a5",
        "id": "proto-5"
    },
    {
        "title": {
            "pt": "Período Probatório",
            "en": "Probationary Period",
            "es": "Período de Prueba"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82a6",
        "id": "proto-6"
    },
    {
        "title": {
            "pt": "Confidencialidade e Não Divulgação",
            "en": "Confidentiality and Non-Disclosure",
            "es": "Confidencialidad y No Divulgación"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82a7",
        "id": "proto-7"
    },
    {
        "title": {
            "pt": "Cláusulas de Não Concorrência",
            "en": "Non-Compete Clauses",
            "es": "Cláusulas de No Competencia"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82a8",
        "id": "proto-8"
    },
    {
        "title": {
            "pt": "Políticas de Licença",
            "en": "Leave Policies",
            "es": "Políticas de Licencia"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82a9",
        "id": "proto-9"
    },
    {
        "title": {
            "pt": "Condições de Rescisão",
            "en": "Termination Conditions",
            "es": "Condiciones de Terminación"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82b0",
        "id": "proto-10"
    },
    {
        "title": {
            "pt": "Resolução de Disputas",
            "en": "Dispute Resolution",
            "es": "Resolución de Disputas"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82b1",
        "id": "proto-11"
    },
    {
        "title": {
            "pt": "Procedimentos de Emenda",
            "en": "Amendment Procedures",
            "es": "Procedimientos de Enmienda"
        },
        "minId": "018g5743-39c2-7f01-h22d-b149a13ws82b2",
        "id": "proto-12"
    }
]